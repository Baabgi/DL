import numpy as np
import cv2
import matplotlib.pyplot as plt
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D
from tensorflow.keras.optimizers import Adam

img = cv2.imread('/content/mj23.webp', cv2.IMREAD_GRAYSCALE)
img = cv2.resize(img, (128, 128)).astype('float32') / 255.0
img = np.reshape(img, (1, 128, 128, 1))

noisy_img = np.clip(img + 0.2 * np.random.normal(0, 1, img.shape), 0., 1.)

input_img = Input(shape=(128, 128, 1))
x = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)
x = MaxPooling2D((2, 2), padding='same')(x)
x = Conv2D(16, (3, 3), activation='relu', padding='same')(x)
x = MaxPooling2D((2, 2), padding='same')(x)
x = Conv2D(16, (3, 3), activation='relu', padding='same')(x)
x = UpSampling2D((2, 2))(x)
x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)
x = UpSampling2D((2, 2))(x)
decoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)

autoencoder = Model(input_img, decoded)
autoencoder.compile(optimizer=Adam(0.001), loss='mean_squared_error')
autoencoder.fit(noisy_img, img, epochs=500, verbose=1)

denoised_img = autoencoder.predict(noisy_img)

plt.figure(figsize=(12, 4))
for i, title, img in zip(range(3), ["Original", "Noisy", "Denoised"], [img, noisy_img, denoised_img]):
    plt.subplot(1, 3, i+1), plt.title(title), plt.imshow(img[0, :, :, 0], cmap='gray')
plt.tight_layout(), plt.show()
